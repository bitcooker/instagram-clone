name: Instagram Clone Workflow

on:
  push:
    branches:
      - main

jobs:
  Detect-Changes:
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.filter.outputs.backend }}
      frontend: ${{ steps.filter.outputs.frontend }}
      cypress: ${{ steps.filter.outputs.cypress }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
      - name: Filter paths changes
        uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            backend:
              - 'apps/backend/**'
            frontend:
              - 'apps/frontend/**'
            cypress:
              - 'cypress/**'

  E2E-Test:
    if: needs.Detect-Changes.outputs.backend == 'true' || needs.Detect-Changes.outputs.frontend == 'true' || needs.Detect-Changes.outputs.cypress == 'true'
    needs: [Detect-Changes]
    runs-on: ubuntu-latest
    steps:
      - name: Setup PostgreSQL
        uses: harmon758/postgresql-action@v1
        with:
          postgresql version: "14"
          postgresql db: postgres
          postgresql user: postgres
          postgresql password: postgres
      - name: Check out repository code
        uses: actions/checkout@v3
      - name: Setup Node.js environment
        uses: actions/setup-node@v3
        with:
          node-version: 16
      - name: Cache node_modules
        uses: actions/cache@v3
        id: node_modules_cache_id
        env:
          cache-name: node_modules_cache
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-yarn-${{ env.cache-name }}-${{ hashFiles('**/yarn.lock') }}
      - name: Install packages
        if: ${{ steps.node_modules_cache_id.outputs.cache-hit != 'true' }}
        run: yarn install
      - name: Seed database
        run: yarn prisma:init
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/postgres?schema=public
        working-directory: apps/backend
      - name: Test On Chrome
        uses: cypress-io/github-action@v4
        with:
          browser: chrome
          start: yarn dev
          wait-on: "http://localhost:3002, http://localhost:5001"
        env:
          JWT_SECRET: jwt_secret
          FRONTEND_ORIGIN: http://localhost:3002
          NEXT_PUBLIC_INSTAGRAM_CLONE_API_URL: http://localhost:5001/graphql
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/postgres?schema=public
          NODE_ENV: development
      - name: Upload Chrome Test Videos
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: Cypress Videos
          path: cypress/videos
      - name: Upload Chrome Test Screenshots
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: Chrome Cypress Screenshots
          path: cypress/screenshots
      - name: Test On Firefox
        uses: cypress-io/github-action@v4
        with:
          browser: firefox
          start: yarn dev
          wait-on: "http://localhost:3002, http://localhost:5001"
        env:
          JWT_SECRET: jwt_secret
          FRONTEND_ORIGIN: http://localhost:3002
          NEXT_PUBLIC_INSTAGRAM_CLONE_API_URL: http://localhost:5001/graphql
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/postgres?schema=public
          NODE_ENV: development
      - name: Upload Firefox Test Videos
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: Cypress Videos
          path: cypress/videos
      - name: Upload Firefox Test Screenshots
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: Firefox Cypress Screenshots
          path: cypress/screenshots

  Build-Backend:
    if: needs.Detect-Changes.outputs.backend == 'true' && !failure()
    needs: [E2E-Test]
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
      - name: Deploy to Heroku
        uses: akhileshns/heroku-deploy@v3.12.12
        with:
          heroku_api_key: ${{secrets.HEROKU_API_KEY}}
          heroku_app_name: ${{secrets.HEROKU_APP_NAME}}
          heroku_email: ${{secrets.HEROKU_EMAIL}}

  Build-Frontend:
    if: needs.Detect-Changes.outputs.frontend == 'true' && !failure()
    needs: [Build-Backend]
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
      - name: Deploy to vercel
        uses: amondnet/vercel-action@v20
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-args: "--prod"
          vercel-org-id: ${{ secrets.ORG_ID}}
          vercel-project-id: ${{ secrets.PROJECT_ID}}

  Purge-Cloudflare-Cache:
    if: always() && needs.Build-Frontend.result == 'success'
    needs: [Build-Frontend]
    runs-on: ubuntu-latest
    steps:
      - name: Purge cloudflare cache
        uses: jakejarvis/cloudflare-purge-action@master
        env:
          CLOUDFLARE_ZONE: ${{ secrets.CLOUDFLARE_ZONE_ID }}
          CLOUDFLARE_TOKEN: ${{ secrets.CLOUDFLARE_TOKEN }}
