name: CI

on:
  push:
    branches:
      - main

jobs:
  Cancel-Previous-Runs:
    runs-on: ubuntu-latest
    timeout-minutes: 1

    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.9.1
        with:
          access_token: ${{ github.token }}

  Detect-Changes:
    runs-on: ubuntu-latest
    timeout-minutes: 1

    outputs:
      backend: ${{ steps.filter.outputs.backend }}
      frontend: ${{ steps.filter.outputs.frontend }}
      cypress: ${{ steps.filter.outputs.cypress }}

    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

      - name: Filter paths changes
        uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            backend:
              - 'apps/backend/**'
            frontend:
              - 'apps/frontend/**'
            cypress:
              - 'cypress/**'

  Build-Backend:
    if: needs.Detect-Changes.outputs.backend == 'true'
    needs: [Detect-Changes, Cancel-Previous-Runs]
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

      - name: Deploy to Heroku
        uses: akhileshns/heroku-deploy@v3.12.12
        with:
          heroku_api_key: ${{secrets.HEROKU_API_KEY}}
          heroku_app_name: ${{secrets.HEROKU_APP_NAME}}
          heroku_email: ${{secrets.HEROKU_EMAIL}}

  Build-Frontend:
    if: needs.Detect-Changes.outputs.frontend == 'true' && !failure()
    needs: [Build-Backend]
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

      - name: Deploy to vercel
        uses: amondnet/vercel-action@v20
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-args: "--prod"
          vercel-org-id: ${{ secrets.ORG_ID}}
          vercel-project-id: ${{ secrets.PROJECT_ID}}

  Analyze-Frontend-Bundle:
    if: needs.Detect-Changes.outputs.frontend == 'true' && !failure()
    needs: [Build-Backend]
    runs-on: ubuntu-latest
    timeout-minutes: 5

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

      - name: Setup Node.js environment
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Cache node_modules
        uses: actions/cache@v3
        id: node_modules_cache_id
        env:
          cache-name: node_modules_cache
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-yarn-${{ env.cache-name }}-${{ hashFiles('**/yarn.lock') }}

      - name: Install packages
        if: ${{ steps.node_modules_cache_id.outputs.cache-hit != 'true' }}
        run: yarn install

      - name: Seed database
        run: yarn prisma:init
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/postgres?schema=public
        working-directory: apps/backend

      - name: Start backend
        run: yarn dev &
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/postgres?schema=public
          NODE_ENV: development
          JWT_SECRET: jwt_secret
          FRONTEND_ORIGIN: http://localhost:3002
        working-directory: apps/backend

      - name: Build for bundle analyzing
        run: yarn next build
        working-directory: apps/frontend
        env:
          NEXT_PUBLIC_INSTAGRAM_CLONE_API_URL: http://localhost:5001/graphql
          NODE_ENV: production
          ANALYZE: true

      - name: Analyze bundle
        run: npx -p nextjs-bundle-analysis report
        working-directory: apps/frontend

      - name: Upload bundle analysis report for future comparison
        uses: actions/upload-artifact@v3
        with:
          name: bundle
          path: apps/frontend/dist/analyze/__bundle_analysis.json

      - name: Upload bundle analysis report
        uses: actions/upload-artifact@v3
        with:
          name: Bundle Analysis Report
          path: apps/frontend/dist/analyze/client.html

      - name: Check previous bundle analysis exsistance
        uses: dawidd6/action-download-artifact@v2
        id: download_artifact
        if: success()
        continue-on-error: true
        with:
          workflow: ci.yml
          name: bundle
          dry_run: true

      - name: Download previous bundle analysis report
        uses: dawidd6/action-download-artifact@v2
        if: success() && steps.download_artifact.outputs.dry_run == 'true'
        with:
          workflow: ci.yml
          path: apps/frontend/dist/analyze/base/bundle
          name: bundle

      - name: Compare with previous bundle analysis report
        if: success() && steps.download_artifact.outputs.dry_run == 'true'
        run: npx -p nextjs-bundle-analysis compare
        working-directory: apps/frontend

      - name: Print result
        if: success() && steps.download_artifact.outputs.dry_run == 'true'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require("fs");
            const output = fs.readFileSync("apps/frontend/dist/analyze/__bundle_analysis_comment.txt");
            await core.summary
              .addRaw(output)
              .write()

  Purge-Cloudflare-Cache:
    if: always() && needs.Build-Frontend.result == 'success'
    needs: [Build-Frontend]
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Purge cloudflare cache
        uses: jakejarvis/cloudflare-purge-action@master
        env:
          CLOUDFLARE_ZONE: ${{ secrets.CLOUDFLARE_ZONE_ID }}
          CLOUDFLARE_TOKEN: ${{ secrets.CLOUDFLARE_TOKEN }}

      - name: Wait 30 seconds to purge cloudflare cache
        run: sleep 30s
        shell: bash

  E2E-Test:
    if: always() && (needs.Detect-Changes.outputs.backend == 'true' || needs.Detect-Changes.outputs.frontend == 'true' || needs.Detect-Changes.outputs.cypress == 'true')
    needs: [Purge-Cloudflare-Cache]
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

      - name: Install japanese font
        run: sudo apt-get install fonts-noto -y

      - name: Test on chrome
        uses: cypress-io/github-action@v4
        with:
          browser: chrome

      - name: Upload test videos
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: Cypress Videos
          path: cypress/videos

      - name: Upload test screenshots
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: Cypress Screenshots
          path: cypress/screenshots

  Visual-Test:
    if: always() && (needs.Detect-Changes.outputs.backend == 'true' || needs.Detect-Changes.outputs.frontend == 'true' || needs.Detect-Changes.outputs.cypress == 'true')
    needs: [Purge-Cloudflare-Cache]
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Install chrome
        run: wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb && sudo apt-get install -y ./google-chrome-stable_current_amd64.deb

      - name: Install packages
        run: yarn add storycap reg-cli

      - name: Save actual screenshots into actualDir
        run: yarn storycap --delay 5000 --outDir actualDir https://app.instagram-clone.net/storybook/

      - name: Check expected screenshots exsistance
        uses: dawidd6/action-download-artifact@v2
        id: download_artifact
        continue-on-error: true
        with:
          workflow: ci.yml
          name: screenshots
          dry_run: true

      - name: Download expected screenshots
        if: success() && steps.download_artifact.outputs.dry_run == 'true'
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: ci.yml
          path: expectedDir
          name: screenshots

      - name: Generate test report
        if: success() && steps.download_artifact.outputs.dry_run == 'true'
        run: yarn reg-cli actualDir expectedDir diffDir --report ./report.html --enableAntialias --json ./reg.json --ignoreChange

      - name: Print VRT result
        if: success() && steps.download_artifact.outputs.dry_run == 'true'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require("fs")
            const output = fs.readFileSync("./reg.json")
            const parsedOutput = JSON.parse(output)
            const stringifiedOutput = JSON.stringify(parsedOutput, null, 2)
            const { failedItems, newItems, deletedItems, passedItems } = parsedOutput
            const result = `
              <h2>VRT Results</h2>
              <table>
                <tr>
                  <th>Result</th>
                  <th>Passed ðŸ”µ</th>
                  <th>Changed ðŸ”´</th>
                  <th>New âšª</th>
                  <th>Deleted âš«</th>
                </tr>
                <tr>
                  <td>Number of images</td>
                  <td>${passedItems.length}</td>
                  <td>${failedItems.length}</td>
                  <td>${newItems.length}</td>
                  <td>${deletedItems.length}</td>
                </tr>
              </table>
              <details><summary>Show Detail</summary>\n
              \`\`\`json\n
              ${stringifiedOutput}\n
              \`\`\`\n
              </details>
              `
            await core.summary
              .addRaw(result)
              .write()

      - name: Compress all generated outputs to vrtReport
        if: success() && steps.download_artifact.outputs.dry_run == 'true'
        run: mkdir vrtReport && cp -r actualDir expectedDir diffDir report.html vrtReport

      - name: Upload VRT report
        if: success() && steps.download_artifact.outputs.dry_run == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: VRT Report
          path: vrtReport

      - name: Rename actualDir to expectedDir
        run: rm -rf expectedDir && mv actualDir expectedDir

      - name: Upload expected screenshots
        uses: actions/upload-artifact@v3
        with:
          name: screenshots
          path: expectedDir

  Lighthouse:
    if: always() && (needs.Detect-Changes.outputs.backend == 'true' || needs.Detect-Changes.outputs.frontend == 'true' || needs.Detect-Changes.outputs.cypress == 'true')
    needs: [Purge-Cloudflare-Cache]
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Create output direcotry for Lighthouse
        run: mkdir lighthouseOutput

      - name: Check Lighthouse
        uses: foo-software/lighthouse-check-action@master
        with:
          outputDirectory: lighthouseOutput
          urls: "https://app.instagram-clone.net/,https://app.instagram-clone.net/signup/"
          device: all

      - name: Move results.json to root
        run: mv lighthouseOutput/results.json results.json

      - name: Check previous Lighthouse results exsistance
        uses: dawidd6/action-download-artifact@v2
        id: download_artifact
        continue-on-error: true
        with:
          workflow: ci.yml
          name: lighthouse
          dry_run: true

      - name: Download previous Lighthouse results
        if: success() && steps.download_artifact.outputs.dry_run == 'true'
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: ci.yml
          path: lighthouse
          name: lighthouse

      - name: Print Lighthouse result
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require("fs")
            const output = fs.readFileSync("./results.json")
            let prevParsedOutputs
            try{
              prevParsedOutputs = JSON.parse(fs.readFileSync("lighthouse/results.json"))
            }catch(error){
              // do nothing
            }
            const parsedOutput = JSON.parse(output)
            const stringifiedOutput = JSON.stringify(parsedOutput, null, 2)
            const getContent = (val) => val > 0 ? `<img src="https://img.icons8.com/ios-glyphs/13/40C057/up--v1.png"/>(${Math.abs(val)})` : val < 0 ? `<img src="https://img.icons8.com/ios-glyphs/13/FA5252/down--v1.png"/>(${Math.abs(val)})` : ''
            const diff = (prev, current) => Number(prev) - Number(current)
            const tds = parsedOutput.map((output,index)=>{
              const url = new URL(output.url);
              const outputScores = output.scores
              const prevParsedOutputScores = prevParsedOutputs[index].scores
              const performanceDiff = diff(prevParsedOutputScores.performance, outputScores.performance)
              const accessibilityDiff = diff(prevParsedOutputScores.accessibility, outputScores.accessibility)
              const bestPracticesDiff = diff(prevParsedOutputScores.bestPractices, outputScores.bestPractices)
              const seoDiff = diff(prevParsedOutputScores.seo, outputScores.seo)
              const pwaDiff = diff(prevParsedOutputScores.progressiveWebApp, outputScores.progressiveWebApp)
              return `
            <tr>
              <td><a href=${output.url}>${url.pathname}</a></td>
              <td>${output.emulatedFormFactor}</td>
              <td>${outputScores.performance} ${getContent(performanceDiff)}</td>
              <td>${outputScores.accessibility} ${getContent(accessibilityDiff)}</td>
              <td>${outputScores.bestPractices} ${getContent(bestPracticesDiff)}</td>
              <td>${outputScores.seo} ${getContent(seoDiff)}</td>
              <td>${outputScores.progressiveWebApp} ${getContent(pwaDiff)}</td>
            </tr>
            `
            }).join("")
            const result = `
            <h2>Lighthouse Results</h2>
            <table>
              <tr>
                <th>Path</th>
                <th>Device</th>
                <th>Performance</th>
                <th>Accessibility</th>
                <th>Best Practices</th>
                <th>SEO</th>
                <th>PWA</th>
              </tr>
                ${tds}
            </table>
            <details>
              <summary>Show Detail</summary>\n
              \`\`\`json\n
              ${stringifiedOutput}\n
              \`\`\`\n
            </details>
            `
            await core.summary
              .addRaw(result)
              .write()

      - name: Upload Lighthouse results
        uses: actions/upload-artifact@v3
        with:
          name: lighthouse
          path: results.json

      - name: Upload Lighthouse reports
        uses: actions/upload-artifact@v3
        with:
          name: Lighthouse Reports
          path: lighthouseOutput
