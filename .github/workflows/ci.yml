name: CI

on:
  push:
    branches:
      - main

jobs:
  Get-Date:
    runs-on: ubuntu-latest
    timeout-minutes: 1

    outputs:
      date: ${{ steps.get_date.outputs.date }}

    steps:
      - id: get_date
        run: echo "::set-output name=date::$(date +'%Y-%m-%d %H:%M')"

  Cancel-Previous-Runs:
    runs-on: ubuntu-latest
    timeout-minutes: 1

    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.9.1
        with:
          access_token: ${{ github.token }}

  Detect-Changes:
    runs-on: ubuntu-latest
    timeout-minutes: 1

    outputs:
      backend: ${{ steps.filter.outputs.backend }}
      frontend: ${{ steps.filter.outputs.frontend }}
      cypress: ${{ steps.filter.outputs.cypress }}

    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

      - name: Filter paths changes
        uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            backend:
              - 'apps/backend/**'
            frontend:
              - 'apps/frontend/**'
            cypress:
              - 'cypress/**'

  Build-Backend:
    if: needs.Detect-Changes.outputs.backend == 'true'
    needs: [Detect-Changes, Cancel-Previous-Runs]
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

      - name: Deploy to Heroku
        uses: akhileshns/heroku-deploy@v3.12.12
        with:
          heroku_api_key: ${{secrets.HEROKU_API_KEY}}
          heroku_app_name: ${{secrets.HEROKU_APP_NAME}}
          heroku_email: ${{secrets.HEROKU_EMAIL}}

  Build-Frontend:
    if: needs.Detect-Changes.outputs.frontend == 'true' && !failure()
    needs: [Build-Backend]
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

      - name: Deploy to vercel
        uses: amondnet/vercel-action@v20
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-args: "--prod"
          vercel-org-id: ${{ secrets.ORG_ID}}
          vercel-project-id: ${{ secrets.PROJECT_ID}}

  Analyze-Frontend-Bundle:
    if: needs.Detect-Changes.outputs.frontend == 'true' && !failure()
    needs: [Get-Date, Build-Backend]
    runs-on: ubuntu-latest
    timeout-minutes: 10

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

      - name: Cache node_modules
        uses: actions/cache@v3
        id: node_modules_cache_id
        env:
          cache-name: node_modules_cache
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-yarn-${{ env.cache-name }}-${{ hashFiles('**/yarn.lock') }}

      - name: Install packages
        if: ${{ steps.node_modules_cache_id.outputs.cache-hit != 'true' }}
        run: yarn install

      - name: Seed database
        run: yarn prisma:init
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/postgres?schema=public
        working-directory: apps/backend

      - name: Start backend
        run: yarn dev &
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/postgres?schema=public
          NODE_ENV: development
          JWT_SECRET: jwt_secret
          FRONTEND_ORIGIN: http://localhost:3002
        working-directory: apps/backend

      - name: Build for bundle analyzing
        run: yarn next build
        working-directory: apps/frontend
        env:
          NEXT_PUBLIC_INSTAGRAM_CLONE_API_URL: http://localhost:5001/graphql
          NODE_ENV: production
          ANALYZE: true

      - name: Analyze bundle
        run: npx -p nextjs-bundle-analysis report
        working-directory: apps/frontend

      - name: Upload bundle analysis report
        uses: actions/upload-artifact@v3
        with:
          name: Bundle Analysis Report
          path: apps/frontend/dist/analyze/client.html

      - name: Install packages
        run: yarn install
        working-directory: .github/utils

      - name: Store latest bundle data to assets/bundle.json
        uses: actions/github-script@v6
        with:
          script: |
            const { analysis } = await import('${{ github.workspace }}/.github/utils/analysis.js')
            await analysis('${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}', '${{needs.Get-Date.outputs.date}}')

      - name: Commit updated assets/bundle.json
        uses: EndBug/add-and-commit@v9.1.0
        with:
          add: apps/gh-pages/src/assets/bundle.json
          pull: origin main

  Purge-Cloudflare-Cache:
    if: always() && needs.Build-Frontend.result == 'success'
    needs: [Build-Frontend]
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Purge cloudflare cache
        uses: jakejarvis/cloudflare-purge-action@master
        env:
          CLOUDFLARE_ZONE: ${{ secrets.CLOUDFLARE_ZONE_ID }}
          CLOUDFLARE_TOKEN: ${{ secrets.CLOUDFLARE_TOKEN }}

      - name: Wait 30 seconds to purge cloudflare cache
        run: sleep 30s
        shell: bash

  E2E-Test:
    if: always() && (needs.Detect-Changes.outputs.backend == 'true' || needs.Detect-Changes.outputs.frontend == 'true' || needs.Detect-Changes.outputs.cypress == 'true')
    needs: [Purge-Cloudflare-Cache]
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

      - name: Test on chrome
        uses: cypress-io/github-action@v4
        continue-on-error: true
        with:
          browser: chrome

      - name: Generate cypress report
        run: |
          mkdir cypress/report
          yarn --silent mochawesome-merge > cypress/report/mochawesome.json
          yarn marge cypress/report/mochawesome.json -o cypress/report

      - name: Upload cypress report
        uses: actions/upload-artifact@v3
        with:
          name: Cypress Report
          path: |
            cypress/report
            cypress/videos
            cypress/screenshots

  Visual-Test:
    if: always() && (needs.Detect-Changes.outputs.backend == 'true' || needs.Detect-Changes.outputs.frontend == 'true' || needs.Detect-Changes.outputs.cypress == 'true')
    needs: [Purge-Cloudflare-Cache]
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

      - name: Install chrome
        run: wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb && sudo apt-get install -y ./google-chrome-stable_current_amd64.deb

      - name: Install packages
        run: npm install --location=global storycap reg-cli

      - name: Save actual screenshots into actualDir
        run: storycap --delay 5000 --outDir actualDir https://app.instagram-clone.net/storybook/

      - name: Create direcotry for store expected screenshots
        run: mkdir expectedDir

      - name: Download expected screenshots
        uses: dawidd6/action-download-artifact@v2
        with:
          if_no_artifact_found: warn
          workflow: ci.yml
          path: expectedDir
          name: vrt-screenshots

      - name: Generate test report
        run: reg-cli actualDir expectedDir diffDir --report ./report.html --enableAntialias --json ./reg.json --ignoreChange

      - name: Print VRT result
        uses: actions/github-script@v6
        with:
          script: |
            const { vrt } = await import('${{ github.workspace }}/.github/utils/vrt.js')
            await vrt(core)

      - name: Compress all generated outputs to vrtReport
        run: mkdir vrtReport && cp -r actualDir expectedDir diffDir report.html vrtReport

      - name: Upload VRT report
        uses: actions/upload-artifact@v3
        with:
          name: VRT Report
          path: vrtReport

      - name: Rename actualDir to expectedDir
        run: rm -rf expectedDir && mv actualDir expectedDir

      - name: Upload expected screenshots
        uses: actions/upload-artifact@v3
        with:
          name: vrt-screenshots
          path: expectedDir

  Lighthouse:
    if: always() && (needs.Detect-Changes.outputs.backend == 'true' || needs.Detect-Changes.outputs.frontend == 'true' || needs.Detect-Changes.outputs.cypress == 'true')
    needs: [Get-Date, Purge-Cloudflare-Cache]
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

      - name: Create output direcotry for Lighthouse
        run: mkdir lighthouseOutput

      - name: Check Lighthouse
        uses: foo-software/lighthouse-check-action@master
        with:
          outputDirectory: lighthouseOutput
          urls: "https://app.instagram-clone.net/,https://app.instagram-clone.net/signup/,https://app.instagram-clone.net/test_user/"
          device: all

      - name: Move results.json to root
        run: mv lighthouseOutput/results.json results.json

      - name: Print Lighthouse result
        uses: actions/github-script@v6
        with:
          script: |
            const { lighthouse } = await import('${{ github.workspace }}/.github/utils/lighthouse.js')
            await lighthouse('${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}', '${{needs.Get-Date.outputs.date}}')

      - name: Upload Lighthouse reports
        uses: actions/upload-artifact@v3
        with:
          name: Lighthouse Reports
          path: lighthouseOutput

      - name: Commit updated assets/lighthouse.json
        uses: EndBug/add-and-commit@v9.1.0
        with:
          add: apps/gh-pages/src/assets/lighthouse.json
          pull: origin main

  GitHub-Pages:
    if: always() && (needs.Detect-Changes.outputs.backend == 'true' || needs.Detect-Changes.outputs.frontend == 'true' || needs.Detect-Changes.outputs.cypress == 'true')
    needs: [Get-Date, Lighthouse, Visual-Test, E2E-Test]
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

      - name: Update local repository code
        run: git pull origin main

      - name: Download bundle analysis report
        uses: actions/download-artifact@v3
        with:
          name: Bundle Analysis Report
          path: apps/gh-pages/public

      - name: Download VRT report
        uses: actions/download-artifact@v3
        with:
          name: VRT Report
          path: apps/gh-pages/public

      - name: Create direcotry for store cypress videos
        run: mkdir apps/gh-pages/public/cypress

      - name: Create direcotry for store lighthouse reports
        run: mkdir apps/gh-pages/public/lighthouse

      - name: Download lighthouse reports
        uses: actions/download-artifact@v3
        with:
          name: Lighthouse Reports
          path: apps/gh-pages/public/lighthouse

      - name: Download cypress reports
        uses: actions/download-artifact@v3
        with:
          name: Cypress Report
          path: apps/gh-pages/public/cypress

      - name: Cache node_modules
        uses: actions/cache@v3
        id: node_modules_cache_id
        env:
          cache-name: node_modules_cache
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-yarn-${{ env.cache-name }}-${{ hashFiles('**/yarn.lock') }}

      - name: Install packages
        if: ${{ steps.node_modules_cache_id.outputs.cache-hit != 'true' }}
        run: yarn install

      - name: Build github pages
        run: yarn turbo run build --scope=gh-pages --include-dependencies --no-deps
        env:
          GH_PAGES_BASE: /instagram-clone
          DATE: ${{needs.Get-Date.outputs.date}}

      - name: Upload github pages artifact
        uses: actions/upload-pages-artifact@v1.0.3
        with:
          path: apps/gh-pages/dist

      - name: Deploy to github pages
        id: deployment
        uses: actions/deploy-pages@v1.0.10

  Line-Notify:
    if: failure()
    needs: [E2E-Test, Visual-Test, Lighthouse]
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Send line notification
        uses: snow-actions/line-notify@v1.0.0
        with:
          access_token: ${{ secrets.LINE_NOTIFY_TOKEN }}
          message: "⚠️Github Actionが失敗しました\n\n${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
